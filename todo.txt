To do before release:
* show search results in UI window
* launch UI from vack
* when printing matched file names, do it relative to the directory being
  searched
* analyze stats from auto-updates
* a way to stop search (e.g. when user press a button in the ui). Possibly by
  returning BOOL from delegate methods, returning NO would mean "stop"
* detect utf encodings that have bom
* try to avoid security dialog by first creating /usr/local/bin/vack link with
  regular security and retrying if it failed
* 'Move to Application folder' http://www.potionfactory.com/node/251
* remember recent searches
* show recent searches in SearchWindow
* cleanup menu items

Things to do:
* handle multiple search locations (search_options.search_loc needs to be a list)
* remember list of all searches. Remembers search pattern, list
  of files/directories to search, maybe also search results
* show list of recent searches in the NSTableView
* build test harness to simulate ack. Will need to change the way tests are
  executed in the harness. Currently invocation looks like:
  perl -T ./capture-stderr stderr.log \.\/ack \-\-noenv Sue \-1 \-h \-\-text t\/text
  i.e. ack must be perl file. I would have to modify capture-stderr and run_ack_with_stderr
  in Util.pm. Alternatively, I can modify test harness to capture executed commands
  and write another tool that runs those commands with ack and the same commands
  with vack and verifies that the results are the same
* detect if outputing to screen or not and based on that set the default flag
  about wheter or not to show colored output; this can be over-written with
  --[no-][color|colour]
* parse ack config file for compatibility
* search large files (bigger than, say, 1MB) at the end (to improve user experience)
* multi-threaded search (assuming we're CPU bound on searches, not I/O bound)

Done:

2009-12-01
 * send number of searches with Sparkle updates
* increase number of searches from within vack

2009-11-29
 * fighting with Sparkle to enable sending profile and uniqueId

2009-11-26:
 * sumbit crash reports to a website
 * if doesn't exist, create link /usr/local/bin/vack to wherever vack lives

2009-11-24:
 * work on submitting crash reports to a website

2009-11-22:
 * UserVoice page for VisualAck
 * write a simple web page about the program
 * build script
 * auto-updates with Sparkle

2009-11-10
 * limit what is searched if there are files/directories given on cmd-line
 * support for multiple matches on one line

2009-11-03
 * notify delegate about matches; show filename colored; show matches
  colored
 * improve FileSearchProtocol; parse search term and search location 
    from cmd-line args

2009-10-24
 * start on FileSearchIterator
 * better tests for [FileLineIterator getNextLine] that also check content
 * fixed [FileLineIterator getNextLine]

2009-10-23
 * work on unit tests for FileLineIterator

2009-10-08
 * started on loc.py

2009-10-07
 * FileLineIterator

2009-10-02
 * list of default dirs to ignore from ack
 * interpret and observe --ignore-dir=$dir and --no-ignore-dir=$dir cmd line arguments

2009-10-01
 * started on scaning files

2009-09-23
 * started on vack cmd-line program
 * understanding ack test suite

2009-09-22
 * imported ack test suite

2009-09-21
 * disable search button if search term or dir is not yet selected
 * initial state of search directory (~)

2009-09-18
 * started the project
